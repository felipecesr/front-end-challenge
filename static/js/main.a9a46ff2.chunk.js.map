{"version":3,"sources":["components/atoms/Space/Space.js","actions/index.js","shared/utils/baseActions.js","actions/actionTypes.js","shared/utils/frontend.js","components/molecules/Modal/Modal.js","components/molecules/Card/Card.js","components/organisms/Cards/Cards.js","components/organisms/Cards/index.js","components/atoms/Button/Button.js","components/atoms/Button/index.js","components/organisms/MainHeader/MainHeader.js","components/organisms/MainHeader/index.js","components/pages/App/App.js","serviceWorker.js","reducers/tarotReducer.js","reducers/index.js","store/index.js","index.js"],"names":["Space","react_default","a","createElement","className","fetchTarot","dispatch","type","axios","get","concat","then","response","payload","data","catch","err","console","log","closeCards","sortCards","getNewState","state","newState","Object","assign","Modal","_ref","isOpen","name","image","close","setScrollLock","value","document","querySelector","style","overflow","ReactDOM","createPortal","onClick","e","stopPropagation","viewBox","d","src","alt","body","Card","_this","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","modalIsOpen","props","isClosed","setState","_this2","_this$props","front","back","_getClassName","_openModal","bind","molecules_Modal_Modal","Component","Cards","items","imagesUrl","imageBackCard","cards","length","keys","map","card","key","molecules_Card_Card","connect","store","tarotReducer","bindActionCreators","Button","children","MainHeader","atoms_Button","App","atoms_Space_Space","organisms_MainHeader","organisms_Cards","Boolean","window","location","hostname","match","initialState","rootReducer","combineReducers","arguments","undefined","action","slice","sort","Math","random","middleware","thunk","applyMiddleware","apply","createStore","Reducers","__REDUX_DEVTOOLS_EXTENSION__","render","es","pages_App_App","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.a9a46ff2.chunk.js","sourcesContent":["import React from 'react';\nimport './Space.scss';\n\nconst Space = () => <div className=\"Space\" />;\n\nexport default Space;\n","import axios from 'axios';\nimport * as types from './actionTypes';\nimport { request, received } from '../shared/utils/baseActions';\n\nexport const fetchTarot = () => dispatch => {\n    dispatch(request(types.FETCH_TAROT_REQUEST));\n\n    const url = process.env.NODE_ENV === 'production' ? '/front-end-challenge/' : '/';\n\n    return axios\n        .get(`${url}tarot.json`)\n        .then(response => dispatch(received(types.FETCH_TAROT_SUCCESS, response.data)))\n        .catch(err => {\n            console.log('AXIOS ERROR:', err.response);\n        });\n};\n\nexport const closeCards = () => ({\n    type: types.CLOSE_CARDS\n});\n\nexport const sortCards = () => ({\n    type: types.SORT_CARDS\n});\n","export const request = type => ({\n    type\n});\n\nexport const received = (type, payload) => ({\n    type,\n    payload\n});\n\nexport const error = type => ({\n    type\n});\n","export const FETCH_TAROT_REQUEST = 'FETCH_TAROT_REQUEST';\nexport const FETCH_TAROT_SUCCESS = 'FETCH_TAROT_SUCCESS';\nexport const FETCH_TAROT_ERROR = 'FETCH_TAROT_ERROR';\nexport const CLOSE_CARDS = 'CLOSE_CARDS';\nexport const SORT_CARDS = 'SORT_CARDS';\n","export function getNewState(state, newState) {\n    return Object.assign({}, state, newState);\n}\n\nexport function isFirstRender(items) {\n    return !items || items.length === 0 || Object.keys(items).length === 0;\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport PropTypes from 'prop-types';\nimport './Modal.scss';\n\nconst Modal = ({ isOpen, name, image, close }) => {\n    const setScrollLock = value => (document.querySelector('html').style.overflow = value);\n\n    if (!isOpen) {\n        setScrollLock('');\n        return null;\n    }\n\n    setScrollLock('hidden');\n\n    return ReactDOM.createPortal(\n        <div className=\"Modal\" onClick={close}>\n            <div className=\"Modal__content\" onClick={e => e.stopPropagation()}>\n                <button className=\"Modal__close\" onClick={close}>\n                    <svg viewBox=\"0 0 40 40\">\n                        <path d=\"M 10,10 L 30,30 M 30,10 L 10,30\" />\n                    </svg>\n                </button>\n                <img src={image} alt={name} />\n                <h1>{name}</h1>\n                <p>\n                    Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nullam mauris felis, pulvinar cursus\n                    pulvinar at, pretium vitae sem. Fusce dolor elit, bibendum sed mollis lobortis, ornare sit amet\n                    libero. Proin congue, urna et semper pharetra, ex diam auctor metus, ac malesuada lectus sapien non\n                    tortor. Maecenas metus augue, auctor at varius vel, facilisis non mi. Sed risus mi, convallis a\n                    lobortis ac, cursus et tortor. Aenean in tempus nisl, a viverra turpis.\n                </p>\n            </div>\n        </div>,\n        document.body\n    );\n};\n\nModal.propTypes = {\n    name: PropTypes.string,\n    image: PropTypes.string\n};\n\nexport default Modal;\n","import React, { Component } from 'react';\nimport { string, bool } from 'prop-types';\nimport './Card.scss';\nimport Modal from '../Modal/Modal';\n\nclass Card extends Component {\n    static propTypes = {\n        name: string.isRequired,\n        front: string.isRequired,\n        back: string.isRequired,\n        isClosed: bool\n    };\n\n    constructor() {\n        super();\n        this.state = {\n            modalIsOpen: false\n        };\n    }\n\n    _getClassName() {\n        const { isClosed } = this.props;\n\n        return isClosed ? 'Card --closed' : 'Card';\n    }\n\n    _openModal() {\n        const { isClosed } = this.props;\n\n        if (isClosed) {\n            this.setState({ modalIsOpen: !this.state.modalIsOpen });\n        }\n    }\n\n    render() {\n        const { name, front, back } = this.props;\n\n        return (\n            <div className={this._getClassName()} onClick={this._openModal.bind(this)}>\n                <div className=\"Card__side --front\">\n                    <img src={front} alt={name} />\n                </div>\n                <div className=\"Card__side --back\">\n                    <img src={back} alt={name} />\n                </div>\n\n                <Modal\n                    name={name}\n                    image={front}\n                    isOpen={this.state.modalIsOpen}\n                    close={() => this.setState({ modalIsOpen: false })}\n                />\n            </div>\n        );\n    }\n}\n\nexport default Card;\n","import React, { Component } from 'react';\nimport { array, string, bool } from 'prop-types';\nimport { isFirstRender } from '../../../shared/utils/frontend';\nimport Card from '../../molecules/Card/Card';\nimport './Cards.scss';\n\nclass Cards extends Component {\n    static propTypes = {\n        imagesUrl: string,\n        imageBackCard: string,\n        cards: array,\n        isClosed: bool\n    };\n\n    componentWillMount() {\n        const { fetchTarot } = this.props;\n\n        fetchTarot();\n    }\n\n    render() {\n        const { imagesUrl, imageBackCard, cards, isClosed } = this.props;\n\n        if (isFirstRender(cards)) {\n            return null;\n        }\n\n        return (\n            <ul className=\"Cards\">\n                {cards.map((card, key) => (\n                    <Card\n                        key={key}\n                        name={card.name}\n                        front={imagesUrl + card.image}\n                        back={imageBackCard}\n                        isClosed={isClosed}\n                    />\n                ))}\n            </ul>\n        );\n    }\n}\n\nexport default Cards;\n","import { connect } from 'react-redux';\nimport { bindActionCreators } from 'redux';\nimport { fetchTarot } from '../../../actions';\nimport Cards from './Cards';\n\nconst mapStateToProps = store => ({\n    imagesUrl: store.tarotReducer.imagesUrl,\n    imageBackCard: store.tarotReducer.imageBackCard,\n    cards: store.tarotReducer.cards,\n    isClosed: store.tarotReducer.isClosed\n});\n\nconst mapDispatchToProps = dispatch => bindActionCreators({ fetchTarot }, dispatch);\n\nexport default connect(\n    mapStateToProps,\n    mapDispatchToProps\n)(Cards);\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport './Button.scss';\n\nconst Button = ({ isClosed, onClick, children }) => {\n    return (\n        <button onClick={() => (!isClosed ? onClick() : '')} className={!isClosed ? 'Button' : 'Button --disabled'}>\n            {children}\n        </button>\n    );\n};\n\nButton.propTypes = {\n    onClick: PropTypes.func,\n    children: PropTypes.string,\n    isClosed: PropTypes.bool\n};\n\nexport default Button;\n","import { connect } from 'react-redux';\nimport Button from './Button';\n\nconst mapStateToProps = store => ({\n    isClosed: store.tarotReducer.isClosed\n});\n\nexport default connect(mapStateToProps)(Button);\n","import React from 'react';\nimport Button from '../../atoms/Button';\nimport './MainHeader.scss';\n\nconst MainHeader = ({ isClosed, closeCards, sortCards }) => {\n    const start = () => {\n        if (!isClosed) {\n            closeCards();\n        }\n\n        sortCards();\n    };\n\n    return (\n        <header className=\"MainHeader\">\n            <h1>Deixe que o tarot traga a solução que você precisa</h1>\n            <p>Confie, concentre-se, faça uma pergunta, escolha uma carta e veja o que ela tem para te revelar...</p>\n            <Button onClick={start}>Iniciar</Button>\n        </header>\n    );\n};\n\nexport default MainHeader;\n","import { connect } from 'react-redux';\nimport { bindActionCreators } from 'redux';\nimport { closeCards, sortCards } from '../../../actions';\nimport MainHeader from './MainHeader';\n\nconst mapStateToProps = store => ({\n    isClosed: store.tarotReducer.isClosed\n});\n\nconst mapDispatchToProps = dispatch => bindActionCreators({ closeCards, sortCards }, dispatch);\n\nexport default connect(\n    mapStateToProps,\n    mapDispatchToProps\n)(MainHeader);\n","import React from 'react';\nimport './App.scss';\nimport Space from '../../atoms/Space/Space';\nimport Cards from '../../organisms/Cards';\nimport MainHeader from '../../organisms/MainHeader';\n\nconst App = () => (\n    <div className=\"App\">\n        <Space />\n        <main className=\"App-header\">\n            <MainHeader />\n            <Cards />\n        </main>\n    </div>\n);\n\nexport default App;\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n\n              // Execute callback\n              if (config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import * as types from '../actions/actionTypes';\nimport { getNewState } from '../shared/utils/frontend';\n\nconst initialState = {\n    imagesUrl: '',\n    imageBackCard: '',\n    cards: [],\n    isClosed: false\n};\n\nexport const tarotReducer = (state = initialState, action) => {\n    switch (action.type) {\n        case types.FETCH_TAROT_SUCCESS:\n            const { payload } = action;\n            return getNewState(state, payload);\n        case types.SORT_CARDS:\n            const cards = state.cards.slice().sort(() => 0.5 - Math.random());\n            return getNewState(state, { cards });\n        case types.CLOSE_CARDS:\n            const isClosed = true;\n            return getNewState(state, { isClosed });\n        default:\n            return state;\n    }\n};\n","import { combineReducers } from 'redux';\nimport { tarotReducer } from './tarotReducer';\n\nconst rootReducer = combineReducers({ tarotReducer });\n\nexport default rootReducer;\n","import { createStore, applyMiddleware } from 'redux';\nimport thunk from 'redux-thunk';\nimport Reducers from '../reducers';\n\nconst middleware = [thunk];\n\nexport const store = applyMiddleware(...middleware)(createStore)(\n    Reducers,\n    window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__()\n);\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport './index.scss';\nimport App from './components/pages/App/App';\nimport * as serviceWorker from './serviceWorker';\nimport { store } from './store';\n\nReactDOM.render(\n    <Provider store={store}>\n        <App />\n    </Provider>,\n    document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}